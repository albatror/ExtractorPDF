
#!/usr/bin/env python3
"""
Script de d√©marrage pour l'application compl√®te d'extraction PDF
"""

import os
import sys
import subprocess
import time
import signal
import threading
from pathlib import Path

class ApplicationManager:
    """Gestionnaire de l'application compl√®te"""
    
    def __init__(self):
        self.backend_process = None
        self.frontend_process = None
        self.running = False
        
    def check_dependencies(self):
        """V√©rifie les d√©pendances syst√®me"""
        print("üîç V√©rification des d√©pendances...")
        
        # V√©rifier Python
        python_version = sys.version_info
        if python_version.major < 3 or python_version.minor < 8:
            print("‚ùå Python 3.8+ requis")
            return False
        print(f"‚úÖ Python {python_version.major}.{python_version.minor}")
        
        # V√©rifier Node.js
        try:
            result = subprocess.run(['node', '--version'], capture_output=True, text=True)
            if result.returncode == 0:
                print(f"‚úÖ Node.js {result.stdout.strip()}")
            else:
                print("‚ùå Node.js non trouv√©")
                return False
        except FileNotFoundError:
            print("‚ùå Node.js non install√©")
            return False
        
        # V√©rifier npm
        try:
            result = subprocess.run(['npm', '--version'], capture_output=True, text=True)
            if result.returncode == 0:
                print(f"‚úÖ npm {result.stdout.strip()}")
            else:
                print("‚ùå npm non trouv√©")
                return False
        except FileNotFoundError:
            print("‚ùå npm non install√©")
            return False
        
        return True
    
    def setup_backend(self):
        """Configure le backend Python"""
        print("\nüêç Configuration du backend Python...")
        
        backend_dir = Path("backend")
        if not backend_dir.exists():
            print("‚ùå Dossier backend non trouv√©")
            return False
        
        # Cr√©er l'environnement virtuel s'il n'existe pas
        venv_dir = backend_dir / "venv"
        if not venv_dir.exists():
            print("üì¶ Cr√©ation de l'environnement virtuel...")
            subprocess.run([sys.executable, "-m", "venv", str(venv_dir)])
        
        # D√©terminer le chemin de l'ex√©cutable Python dans le venv
        if os.name == 'nt':  # Windows
            python_exe = venv_dir / "Scripts" / "python.exe"
            pip_exe = venv_dir / "Scripts" / "pip.exe"
        else:  # Unix/Linux/Mac
            python_exe = venv_dir / "bin" / "python"
            pip_exe = venv_dir / "bin" / "pip"
        
        # Installer les d√©pendances
        print("üì¶ Installation des d√©pendances Python...")
        requirements_file = backend_dir / "requirements.txt"
        if requirements_file.exists():
            subprocess.run([str(pip_exe), "install", "-r", str(requirements_file)])
        
        # Cr√©er les dossiers n√©cessaires
        logs_dir = backend_dir / "logs"
        logs_dir.mkdir(exist_ok=True)
        
        temp_dir = backend_dir / "temp"
        temp_dir.mkdir(exist_ok=True)
        
        print("‚úÖ Backend configur√©")
        return str(python_exe)
    
    def setup_frontend(self):
        """Configure le frontend React"""
        print("\n‚öõÔ∏è  Configuration du frontend React...")
        
        frontend_dir = Path("frontend")
        if not frontend_dir.exists():
            print("‚ùå Dossier frontend non trouv√©")
            return False
        
        # Installer les d√©pendances npm
        print("üì¶ Installation des d√©pendances npm...")
        os.chdir(frontend_dir)
        result = subprocess.run(["npm", "install"])
        os.chdir("..")
        
        if result.returncode != 0:
            print("‚ùå Erreur lors de l'installation npm")
            return False
        
        print("‚úÖ Frontend configur√©")
        return True
    
    def start_backend(self, python_exe):
        """D√©marre le serveur backend"""
        print("\nüöÄ D√©marrage du backend...")
        
        backend_dir = Path("backend")
        os.chdir(backend_dir)
        
        # D√©marrer uvicorn
        self.backend_process = subprocess.Popen([
            python_exe, "-m", "uvicorn", "main:app", 
            "--host", "0.0.0.0", 
            "--port", "8000", 
            "--reload"
        ])
        
        os.chdir("..")
        
        # Attendre que le backend soit pr√™t
        print("‚è≥ Attente du d√©marrage du backend...")
        time.sleep(5)
        
        # V√©rifier que le backend r√©pond
        try:
            import requests
            response = requests.get("http://localhost:8000/", timeout=10)
            if response.status_code == 200:
                print("‚úÖ Backend d√©marr√© sur http://localhost:8000")
                return True
        except:
            pass
        
        print("‚ùå Le backend ne r√©pond pas")
        return False
    
    def start_frontend(self):
        """D√©marre le serveur frontend"""
        print("\nüåê D√©marrage du frontend...")
        
        frontend_dir = Path("frontend")
        os.chdir(frontend_dir)
        
        # D√©marrer le serveur de d√©veloppement React
        env = os.environ.copy()
        env["BROWSER"] = "none"  # Emp√™cher l'ouverture automatique du navigateur
        
        self.frontend_process = subprocess.Popen([
            "npm", "start"
        ], env=env)
        
        os.chdir("..")
        
        print("‚è≥ Attente du d√©marrage du frontend...")
        time.sleep(10)
        
        print("‚úÖ Frontend d√©marr√© sur http://localhost:3000")
        return True
    
    def run_tests(self):
        """Ex√©cute les tests d'int√©gration"""
        print("\nüß™ Ex√©cution des tests d'int√©gration...")
        
        backend_dir = Path("backend")
        test_script = backend_dir / "integration_test.py"
        
        if test_script.exists():
            os.chdir(backend_dir)
            result = subprocess.run([sys.executable, "integration_test.py"])
            os.chdir("..")
            
            if result.returncode == 0:
                print("‚úÖ Tests d'int√©gration r√©ussis")
                return True
            else:
                print("‚ùå Certains tests ont √©chou√©")
                return False
        else:
            print("‚ö†Ô∏è  Script de test non trouv√©")
            return True
    
    def signal_handler(self, signum, frame):
        """Gestionnaire de signal pour arr√™t propre"""
        print("\nüõë Arr√™t de l'application...")
        self.stop()
        sys.exit(0)
    
    def stop(self):
        """Arr√™te tous les processus"""
        self.running = False
        
        if self.backend_process:
            print("üõë Arr√™t du backend...")
            self.backend_process.terminate()
            self.backend_process.wait()
        
        if self.frontend_process:
            print("üõë Arr√™t du frontend...")
            self.frontend_process.terminate()
            self.frontend_process.wait()
    
    def run(self, run_tests=False):
        """Lance l'application compl√®te"""
        print("üöÄ D√©marrage de l'application d'extraction PDF")
        print("=" * 50)
        
        # Configurer le gestionnaire de signal
        signal.signal(signal.SIGINT, self.signal_handler)
        signal.signal(signal.SIGTERM, self.signal_handler)
        
        try:
            # V√©rifications pr√©liminaires
            if not self.check_dependencies():
                print("‚ùå D√©pendances manquantes")
                return False
            
            # Configuration
            python_exe = self.setup_backend()
            if not python_exe:
                return False
            
            if not self.setup_frontend():
                return False
            
            # D√©marrage des services
            if not self.start_backend(python_exe):
                return False
            
            if not self.start_frontend():
                return False
            
            # Tests optionnels
            if run_tests:
                self.run_tests()
            
            # Affichage des informations
            print("\n" + "=" * 50)
            print("üéâ Application d√©marr√©e avec succ√®s !")
            print("=" * 50)
            print("üåê Frontend: http://localhost:3000")
            print("üîß Backend API: http://localhost:8000")
            print("üìö Documentation API: http://localhost:8000/docs")
            print("=" * 50)
            print("üí° Utilisez Ctrl+C pour arr√™ter l'application")
            print("=" * 50)
            
            # Maintenir l'application en vie
            self.running = True
            while self.running:
                time.sleep(1)
                
                # V√©rifier que les processus sont toujours actifs
                if self.backend_process and self.backend_process.poll() is not None:
                    print("‚ùå Le backend s'est arr√™t√© de mani√®re inattendue")
                    break
                
                if self.frontend_process and self.frontend_process.poll() is not None:
                    print("‚ùå Le frontend s'est arr√™t√© de mani√®re inattendue")
                    break
            
            return True
            
        except Exception as e:
            print(f"‚ùå Erreur lors du d√©marrage: {e}")
            return False
        
        finally:
            self.stop()

def main():
    """Fonction principale"""
    import argparse
    
    parser = argparse.ArgumentParser(description="D√©marrage de l'application d'extraction PDF")
    parser.add_argument("--test", action="store_true", help="Ex√©cuter les tests d'int√©gration")
    parser.add_argument("--backend-only", action="store_true", help="D√©marrer seulement le backend")
    parser.add_argument("--frontend-only", action="store_true", help="D√©marrer seulement le frontend")
    
    args = parser.parse_args()
    
    manager = ApplicationManager()
    
    if args.backend_only:
        if manager.check_dependencies():
            python_exe = manager.setup_backend()
            if python_exe:
                manager.start_backend(python_exe)
                print("Backend d√©marr√©. Appuyez sur Ctrl+C pour arr√™ter.")
                try:
                    while True:
                        time.sleep(1)
                except KeyboardInterrupt:
                    manager.stop()
    
    elif args.frontend_only:
        if manager.check_dependencies():
            if manager.setup_frontend():
                manager.start_frontend()
                print("Frontend d√©marr√©. Appuyez sur Ctrl+C pour arr√™ter.")
                try:
                    while True:
                        time.sleep(1)
                except KeyboardInterrupt:
                    manager.stop()
    
    else:
        success = manager.run(run_tests=args.test)
        sys.exit(0 if success else 1)

if __name__ == "__main__":
    main()
